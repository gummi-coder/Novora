{"version":3,"file":"PhotoSurveyDemo-DiOLSIe0.js","sources":["../../src/components/survey/PhotoBasedSurvey.tsx","../../src/pages/PhotoSurveyDemo.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { Check, ArrowRight, ArrowLeft } from 'lucide-react';\n\ninterface PhotoOption {\n  number: number;\n  photoName: string;\n  photoPath: string;\n  description: string;\n  emotion: string;\n}\n\ninterface PhotoBasedSurveyProps {\n  question: string;\n  onAnswer: (selectedNumber: number) => void;\n  onBack?: () => void;\n  onNext?: () => void;\n  currentStep?: number;\n  totalSteps?: number;\n}\n\nconst PhotoBasedSurvey: React.FC<PhotoBasedSurveyProps> = ({\n  question,\n  onAnswer,\n  onBack,\n  onNext,\n  currentStep = 1,\n  totalSteps = 1\n}) => {\n  const [selectedNumber, setSelectedNumber] = useState<number | null>(null);\n  const [showSelected, setShowSelected] = useState(false);\n  const { toast } = useToast();\n\n  // Photo mapping based on your specifications\n  const photoOptions: PhotoOption[] = [\n    {\n      number: 0,\n      photoName: \"111111\",\n      photoPath: \"/survey-photos/111111.png\", // Replace with your actual photo\n      description: \"Very Dissatisfied\",\n      emotion: \"Extremely Sad\"\n    },\n    {\n      number: 1,\n      photoName: \"1010\",\n      photoPath: \"/survey-photos/1010.png\", // Replace with your actual photo\n      description: \"Dissatisfied\",\n      emotion: \"Sad\"\n    },\n    {\n      number: 2,\n      photoName: \"999\",\n      photoPath: \"/survey-photos/999.png\", // Replace with your actual photo\n      description: \"Somewhat Dissatisfied\",\n      emotion: \"Unhappy\"\n    },\n    {\n      number: 3,\n      photoName: \"888\",\n      photoPath: \"/survey-photos/888.png\", // Replace with your actual photo\n      description: \"Neutral\",\n      emotion: \"Neutral\"\n    },\n    {\n      number: 4,\n      photoName: \"777\",\n      photoPath: \"/survey-photos/777.png\", // Replace with your actual photo\n      description: \"Somewhat Satisfied\",\n      emotion: \"Slightly Happy\"\n    },\n    {\n      number: 5,\n      photoName: \"666\",\n      photoPath: \"/survey-photos/666.png\", // Replace with your actual photo\n      description: \"Satisfied\",\n      emotion: \"Happy\"\n    },\n    {\n      number: 6,\n      photoName: \"555\",\n      photoPath: \"/survey-photos/555.png\", // Replace with your actual photo\n      description: \"Very Satisfied\",\n      emotion: \"Very Happy\"\n    },\n    {\n      number: 7,\n      photoName: \"444\",\n      photoPath: \"/survey-photos/444.png\", // Replace with your actual photo\n      description: \"Extremely Satisfied\",\n      emotion: \"Extremely Happy\"\n    },\n    {\n      number: 8,\n      photoName: \"333\",\n      photoPath: \"/survey-photos/333.png\", // Replace with your actual photo\n      description: \"Outstanding\",\n      emotion: \"Ecstatic\"\n    },\n    {\n      number: 9,\n      photoName: \"222\",\n      photoPath: \"/survey-photos/222.png\", // Replace with your actual photo\n      description: \"Exceptional\",\n      emotion: \"Overjoyed\"\n    },\n    {\n      number: 10,\n      photoName: \"111\",\n      photoPath: \"/survey-photos/111.png\", // Replace with your actual photo\n      description: \"Perfect\",\n      emotion: \"Perfect\"\n    }\n  ];\n\n  const handlePhotoSelect = (number: number) => {\n    setSelectedNumber(number);\n    setShowSelected(true);\n    \n    toast({\n      title: \"Selection Made!\",\n      description: `You selected: ${photoOptions.find(p => p.number === number)?.description}`,\n    });\n  };\n\n  const handleConfirm = () => {\n    if (selectedNumber !== null) {\n      onAnswer(selectedNumber);\n      setShowSelected(false);\n      setSelectedNumber(null);\n    }\n  };\n\n  const handleBack = () => {\n    setSelectedNumber(null);\n    setShowSelected(false);\n    onBack?.();\n  };\n\n  const getSelectedPhoto = () => {\n    return photoOptions.find(p => p.number === selectedNumber);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            {onBack && (\n              <Button\n                variant=\"ghost\"\n                onClick={handleBack}\n                className=\"flex items-center gap-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                Back\n              </Button>\n            )}\n            <div className=\"flex-1\" />\n            {totalSteps > 1 && (\n              <Badge variant=\"secondary\" className=\"ml-auto\">\n                Step {currentStep} of {totalSteps}\n              </Badge>\n            )}\n          </div>\n          \n          <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            {question}\n          </h1>\n          <p className=\"text-gray-600 text-lg\">\n            Select the number that best represents your response\n          </p>\n        </div>\n\n        {/* Photo Grid */}\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4 mb-8\">\n          {photoOptions.map((option) => (\n            <Card\n              key={option.number}\n              className={`cursor-pointer transition-all duration-200 hover:shadow-lg hover:scale-105 ${\n                selectedNumber === option.number\n                  ? 'ring-4 ring-blue-500 bg-blue-50'\n                  : 'hover:bg-gray-50'\n              }`}\n              onClick={() => handlePhotoSelect(option.number)}\n            >\n              <CardContent className=\"p-4 text-center\">\n                {/* Actual Photo */}\n                <div className=\"w-16 h-16 mx-auto mb-3 rounded-lg overflow-hidden border-2 border-gray-200 hover:border-blue-300 transition-colors\">\n                  <img\n                    src={`/survey-photos/${option.photoName}.png`}\n                    alt={`Photo ${option.number} - ${option.emotion}`}\n                    className=\"w-full h-full object-cover\"\n                    onError={(e) => {\n                      // Fallback to emoji if image fails to load\n                      const target = e.target as HTMLImageElement;\n                      target.style.display = 'none';\n                      target.nextElementSibling?.classList.remove('hidden');\n                    }}\n                  />\n                  {/* Fallback emoji */}\n                  <div className={`w-full h-full bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center text-2xl ${option.photoPath ? 'hidden' : ''}`}>\n                    {option.emotion === \"Extremely Sad\" && \"üò¢\"}\n                    {option.emotion === \"Sad\" && \"üòû\"}\n                    {option.emotion === \"Unhappy\" && \"üòï\"}\n                    {option.emotion === \"Neutral\" && \"üòê\"}\n                    {option.emotion === \"Slightly Happy\" && \"üôÇ\"}\n                    {option.emotion === \"Happy\" && \"üòä\"}\n                    {option.emotion === \"Very Happy\" && \"üòÑ\"}\n                    {option.emotion === \"Extremely Happy\" && \"üòÅ\"}\n                    {option.emotion === \"Ecstatic\" && \"ü§©\"}\n                    {option.emotion === \"Overjoyed\" && \"ü•≥\"}\n                    {option.emotion === \"Perfect\" && \"üòç\"}\n                  </div>\n                </div>\n                \n                <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                  {option.number}\n                </div>\n                \n                <div className=\"text-xs text-gray-600 font-medium\">\n                  {option.description}\n                </div>\n                \n                {selectedNumber === option.number && (\n                  <div className=\"mt-2\">\n                    <Check className=\"w-5 h-5 text-blue-600 mx-auto\" />\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Selected Photo Display */}\n        {showSelected && selectedNumber !== null && (\n          <Card className=\"mb-8 bg-gradient-to-r from-blue-50 to-purple-50 border-2 border-blue-200\">\n            <CardHeader>\n              <CardTitle className=\"text-center text-blue-900\">\n                Your Selection\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-col md:flex-row items-center justify-center gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"w-24 h-24 mx-auto mb-4 rounded-full overflow-hidden border-4 border-blue-200\">\n                    <img\n                      src={getSelectedPhoto()?.photoPath}\n                      alt={`Selected Photo ${selectedNumber} - ${getSelectedPhoto()?.emotion}`}\n                      className=\"w-full h-full object-cover\"\n                      onError={(e) => {\n                        // Fallback to emoji if image fails to load\n                        const target = e.target as HTMLImageElement;\n                        target.style.display = 'none';\n                        target.nextElementSibling?.classList.remove('hidden');\n                      }}\n                    />\n                    {/* Fallback emoji */}\n                    <div className={`w-full h-full bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center text-4xl ${getSelectedPhoto()?.photoPath ? 'hidden' : ''}`}>\n                      {getSelectedPhoto()?.emotion === \"Extremely Sad\" && \"üò¢\"}\n                      {getSelectedPhoto()?.emotion === \"Sad\" && \"üòû\"}\n                      {getSelectedPhoto()?.emotion === \"Unhappy\" && \"üòï\"}\n                      {getSelectedPhoto()?.emotion === \"Neutral\" && \"üòê\"}\n                      {getSelectedPhoto()?.emotion === \"Slightly Happy\" && \"üôÇ\"}\n                      {getSelectedPhoto()?.emotion === \"Happy\" && \"üòä\"}\n                      {getSelectedPhoto()?.emotion === \"Very Happy\" && \"üòÑ\"}\n                      {getSelectedPhoto()?.emotion === \"Extremely Happy\" && \"üòÅ\"}\n                      {getSelectedPhoto()?.emotion === \"Ecstatic\" && \"ü§©\"}\n                      {getSelectedPhoto()?.emotion === \"Overjoyed\" && \"ü•≥\"}\n                      {getSelectedPhoto()?.emotion === \"Perfect\" && \"üòç\"}\n                    </div>\n                  </div>\n                  <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n                    {selectedNumber}\n                  </div>\n                  <div className=\"text-lg font-semibold text-gray-700 mb-1\">\n                    {getSelectedPhoto()?.description}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    {getSelectedPhoto()?.emotion}\n                  </div>\n                </div>\n                \n                <div className=\"text-center md:text-left\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                    Photo: {getSelectedPhoto()?.photoName}\n                  </h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    This represents your level of satisfaction or agreement with the question.\n                  </p>\n                  <div className=\"flex flex-col sm:flex-row gap-3\">\n                    <Button\n                      onClick={() => setShowSelected(false)}\n                      variant=\"outline\"\n                      className=\"flex-1\"\n                    >\n                      Change Selection\n                    </Button>\n                    <Button\n                      onClick={handleConfirm}\n                      className=\"flex-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n                    >\n                      Confirm Selection\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Instructions */}\n        <Card className=\"bg-white/80 backdrop-blur-sm\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">\n              How to Use This Survey\n            </h3>\n            <div className=\"grid md:grid-cols-2 gap-4 text-sm text-gray-600\">\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">üì± Mobile Friendly</h4>\n                <p>Tap any photo to select your response. The interface is optimized for touch devices.</p>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">üéØ Easy Selection</h4>\n                <p>Each number corresponds to a specific emotion and satisfaction level. Choose what feels right!</p>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">üîÑ Change Your Mind</h4>\n                <p>You can change your selection before confirming. Just tap a different photo.</p>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">‚úÖ Confirm & Continue</h4>\n                <p>Once you're happy with your choice, confirm to proceed to the next question.</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default PhotoBasedSurvey;\n","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PhotoBasedSurvey from '@/components/survey/PhotoBasedSurvey';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { CheckCircle, ArrowLeft } from 'lucide-react';\n\ninterface SurveyQuestion {\n  id: number;\n  question: string;\n  category: string;\n}\n\ninterface SurveyAnswer {\n  questionId: number;\n  question: string;\n  selectedNumber: number;\n  photoName: string;\n  emotion: string;\n}\n\nconst PhotoSurveyDemo = () => {\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [answers, setAnswers] = useState<SurveyAnswer[]>([]);\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  const questions: SurveyQuestion[] = [\n    {\n      id: 1,\n      question: \"How satisfied are you with your current work environment?\",\n      category: \"Work Environment\"\n    },\n    {\n      id: 2,\n      question: \"How would you rate your relationship with your manager?\",\n      category: \"Management\"\n    },\n    {\n      id: 3,\n      question: \"How happy are you with your work-life balance?\",\n      category: \"Work-Life Balance\"\n    },\n    {\n      id: 4,\n      question: \"How satisfied are you with your career growth opportunities?\",\n      category: \"Career Development\"\n    },\n    {\n      id: 5,\n      question: \"How would you rate the overall company culture?\",\n      category: \"Company Culture\"\n    }\n  ];\n\n  const handleAnswer = (selectedNumber: number) => {\n    const currentQuestion = questions[currentStep - 1];\n    const photoMapping = {\n      0: { photoName: \"111111\", emotion: \"Extremely Sad\" },\n      1: { photoName: \"1010\", emotion: \"Sad\" },\n      2: { photoName: \"999\", emotion: \"Unhappy\" },\n      3: { photoName: \"888\", emotion: \"Neutral\" },\n      4: { photoName: \"777\", emotion: \"Slightly Happy\" },\n      5: { photoName: \"666\", emotion: \"Happy\" },\n      6: { photoName: \"555\", emotion: \"Very Happy\" },\n      7: { photoName: \"444\", emotion: \"Extremely Happy\" },\n      8: { photoName: \"333\", emotion: \"Ecstatic\" },\n      9: { photoName: \"222\", emotion: \"Overjoyed\" },\n      10: { photoName: \"111\", emotion: \"Perfect\" }\n    };\n\n    const answer: SurveyAnswer = {\n      questionId: currentQuestion.id,\n      question: currentQuestion.question,\n      selectedNumber,\n      photoName: photoMapping[selectedNumber as keyof typeof photoMapping].photoName,\n      emotion: photoMapping[selectedNumber as keyof typeof photoMapping].emotion\n    };\n\n    setAnswers(prev => [...prev, answer]);\n\n    if (currentStep < questions.length) {\n      setCurrentStep(prev => prev + 1);\n      toast({\n        title: \"Answer Saved!\",\n        description: `Moving to question ${currentStep + 1} of ${questions.length}`,\n      });\n    } else {\n      setIsCompleted(true);\n      toast({\n        title: \"Survey Completed!\",\n        description: \"Thank you for your responses!\",\n      });\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep > 1) {\n      setCurrentStep(prev => prev - 1);\n      setAnswers(prev => prev.slice(0, -1));\n    } else {\n      navigate('/dashboard');\n    }\n  };\n\n  const handleRestart = () => {\n    setCurrentStep(1);\n    setAnswers([]);\n    setIsCompleted(false);\n  };\n\n  const getAverageScore = () => {\n    if (answers.length === 0) return 0;\n    const total = answers.reduce((sum, answer) => sum + answer.selectedNumber, 0);\n    return (total / answers.length).toFixed(1);\n  };\n\n  const getOverallEmotion = (score: number) => {\n    if (score >= 8) return \"üòç Perfect\";\n    if (score >= 6) return \"üòÑ Very Happy\";\n    if (score >= 4) return \"üòä Happy\";\n    if (score >= 2) return \"üòê Neutral\";\n    return \"üò¢ Unhappy\";\n  };\n\n  if (isCompleted) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 p-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-20 h-20 mx-auto mb-4 bg-green-100 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"w-12 h-12 text-green-600\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Survey Completed!\n            </h1>\n            <p className=\"text-gray-600 text-lg mb-8\">\n              Thank you for your responses. Here's a summary of your answers.\n            </p>\n          </div>\n\n          {/* Summary Card */}\n          <Card className=\"mb-8 bg-gradient-to-r from-green-50 to-blue-50 border-2 border-green-200\">\n            <CardHeader>\n              <CardTitle className=\"text-center text-green-900\">\n                Survey Summary\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-3 gap-6 text-center\">\n                <div>\n                  <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n                    {answers.length}\n                  </div>\n                  <div className=\"text-gray-600\">Questions Answered</div>\n                </div>\n                <div>\n                  <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n                    {getAverageScore()}\n                  </div>\n                  <div className=\"text-gray-600\">Average Score</div>\n                </div>\n                <div>\n                  <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                    {getOverallEmotion(parseFloat(getAverageScore()))}\n                  </div>\n                  <div className=\"text-gray-600\">Overall Sentiment</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Detailed Answers */}\n          <div className=\"grid gap-4 mb-8\">\n            {answers.map((answer, index) => (\n              <Card key={answer.questionId} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-col md:flex-row items-start md:items-center gap-4\">\n                    <div className=\"flex-shrink-0\">\n                      <Badge variant=\"outline\" className=\"mb-2\">\n                        Question {index + 1}\n                      </Badge>\n                      <div className=\"text-2xl\">\n                        {answer.emotion === \"Extremely Sad\" && \"üò¢\"}\n                        {answer.emotion === \"Sad\" && \"üòû\"}\n                        {answer.emotion === \"Unhappy\" && \"üòï\"}\n                        {answer.emotion === \"Neutral\" && \"üòê\"}\n                        {answer.emotion === \"Slightly Happy\" && \"üôÇ\"}\n                        {answer.emotion === \"Happy\" && \"üòä\"}\n                        {answer.emotion === \"Very Happy\" && \"üòÑ\"}\n                        {answer.emotion === \"Extremely Happy\" && \"üòÅ\"}\n                        {answer.emotion === \"Ecstatic\" && \"ü§©\"}\n                        {answer.emotion === \"Overjoyed\" && \"ü•≥\"}\n                        {answer.emotion === \"Perfect\" && \"üòç\"}\n                      </div>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">\n                        {answer.question}\n                      </h3>\n                      <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                        <span>Score: <strong>{answer.selectedNumber}</strong></span>\n                        <span>Photo: <strong>{answer.photoName}</strong></span>\n                        <span>Emotion: <strong>{answer.emotion}</strong></span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button\n              onClick={handleRestart}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              Take Survey Again\n            </Button>\n            <Button\n              onClick={() => navigate('/dashboard')}\n              className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n            >\n              Back to Dashboard\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <PhotoBasedSurvey\n      question={questions[currentStep - 1].question}\n      onAnswer={handleAnswer}\n      onBack={handleBack}\n      currentStep={currentStep}\n      totalSteps={questions.length}\n    />\n  );\n};\n\nexport default PhotoSurveyDemo;\n"],"names":["useState","_a","jsxs","jsx"],"mappings":"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"}