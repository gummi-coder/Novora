{"version":3,"file":"useAuth-DVm6gpcM.js","sources":["../../src/services/auth.ts","../../src/hooks/useAuth.ts"],"sourcesContent":["import axios from 'axios';\nimport { User, AuthResponse, LoginCredentials, RegisterData } from '../types/auth';\n\nconst API_URL = import.meta.env.VITE_API_URL ? `${import.meta.env.VITE_API_URL}/api/v1` : 'http://localhost:8000/api/v1';\n\nexport const authService = {\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    const response = await axios.post(`${API_URL}/auth/login`, credentials);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n\n  async register(data: RegisterData): Promise<AuthResponse> {\n    const response = await axios.post(`${API_URL}/auth/register`, data);\n    return response.data;\n  },\n\n  async logout(): Promise<void> {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    await axios.post(`${API_URL}/auth/logout`);\n  },\n\n  async refreshToken(): Promise<AuthResponse> {\n    const response = await axios.post(`${API_URL}/auth/refresh-token`);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    return response.data;\n  },\n\n  async forgotPassword(email: string): Promise<void> {\n    await axios.post(`${API_URL}/auth/forgot-password`, { email });\n  },\n\n  async resetPassword(token: string, password: string): Promise<void> {\n    await axios.post(`${API_URL}/auth/reset-password`, { token, password });\n  },\n\n  async verifyEmail(token: string): Promise<void> {\n    await axios.get(`${API_URL}/auth/verify-email/${token}`);\n  },\n\n  getCurrentUser(): User | null {\n    const userStr = localStorage.getItem('user');\n    if (userStr) {\n      return JSON.parse(userStr);\n    }\n    \n    // Return default admin user for testing\n    return {\n      id: '1',\n      email: 'admin@novora.com',\n      role: 'admin',\n      name: 'Admin User',\n      companyId: '1',\n      company_name: 'Novora',\n      isEmailVerified: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n  },\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  },\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n}; ","import { useState, useEffect, useCallback } from 'react';\nimport { authService } from '../services/auth';\nimport { User } from '../types/auth';\n\nexport const useAuth = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const currentUser = authService.getCurrentUser();\n    setUser(currentUser);\n    setLoading(false);\n  }, []);\n\n  const login = useCallback(async (email: string, password: string) => {\n    const response = await authService.login({ email, password });\n    setUser(response.user);\n    return response;\n  }, []);\n\n  const register = useCallback(async (data: any) => {\n    const response = await authService.register(data);\n    setUser(response.user);\n    return response;\n  }, []);\n\n  const logout = useCallback(async () => {\n    await authService.logout();\n    setUser(null);\n  }, []);\n\n  const isAuthenticated = useCallback(() => {\n    return !!user;\n  }, [user]);\n\n  return {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    isAuthenticated: isAuthenticated()\n  };\n}; "],"names":["useState","useEffect","useCallback"],"mappings":"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"}