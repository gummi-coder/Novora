// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                      String   @id @default(cuid())
  name                    String
  subscriptionStartDate   DateTime?
  subscriptionEndDate     DateTime?
  trialEndsAt             DateTime?
  paymentStatus           String   @default("ACTIVE") // ACTIVE, PAST_DUE, CANCELED
  billingDetails          Json?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  users                   User[]
  teams                   Team[]
  dashboards              Dashboard[]
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  password              String
  name                  String?
  role                  String    @default("user")
  isActive              Boolean   @default(true)
  isEmailVerified       Boolean   @default(false)
  lastLogin             DateTime?
  resetPasswordToken    String?
  resetPasswordExpires  DateTime?
  invitedAt             DateTime?
  invitedBy             String?
  mfaSecret             String?   // For multi-factor authentication
  phoneNumber           String?   // For SMS-based features
  avatarUrl             String?   // For user profile pictures
  locale                String?   // For localization
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  customer              Customer?
  subscription          Subscription?
  teams                 Team[]
  dashboards            Dashboard[]
  teamMembers           TeamMember[]
  files                 File[]
  apiLogs               ApiLog[]
  companyId             String?
  company               Company?  @relation(fields: [companyId], references: [id])
  loginLogs             UserLoginLog[]
}

model UserLoginLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  loginAt     DateTime @default(now())
  ipAddress   String?
  userAgent   String?
  deviceInfo  String?
  success     Boolean  @default(true)
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  members     TeamMember[]
  dashboards  Dashboard[]
  companyId   String?
  company     Company?     @relation(fields: [companyId], references: [id])
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String   @default("member")
  joinedAt  DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Dashboard {
  id          String    @id @default(cuid())
  name        String
  description String?
  userId      String
  teamId      String
  isPublic    Boolean   @default(false)
  config      Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  team        Team      @relation(fields: [teamId], references: [id])
  widgets     Widget[]
  companyId   String?
  company     Company?  @relation(fields: [companyId], references: [id])
}

model Widget {
  id          String    @id @default(cuid())
  dashboardId String
  type        String
  title       String
  config      Json?
  data        Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id])
}

model Customer {
  id              String    @id @default(cuid())
  userId          String    @unique
  stripeCustomerId String   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
}

model Subscription {
  id                String    @id
  userId            String    @unique
  planId            String
  status            String
  currentPeriodStart DateTime
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id])
}

model File {
  id        String   @id @default(cuid())
  name      String
  size      Int
  type      String
  url       String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ApiLog {
  id        String   @id @default(cuid())
  endpoint  String
  method    String
  status    Int
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
